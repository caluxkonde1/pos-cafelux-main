#!/usr/bin/env node

/**
 * 🚀 Automated Niagahoster Database Setup Helper
 * This script helps you configure your database connection after cPanel setup
 */

import { createInterface } from 'readline';
import fs from 'fs';
import mysql from 'mysql2/promise';

const rl = createInterface({
  input: process.stdin,
  output: process.stdout
});

function question(prompt) {
  return new Promise((resolve) => {
    rl.question(prompt, resolve);
  });
}

function log(message, type = 'info') {
  const colors = {
    info: '\x1b[36m',    // Cyan
    success: '\x1b[32m', // Green
    warning: '\x1b[33m', // Yellow
    error: '\x1b[31m',   // Red
    reset: '\x1b[0m'     // Reset
  };
  
  const icons = {
    info: 'ℹ️',
    success: '✅',
    warning: '⚠️',
    error: '❌'
  };
  
  console.log(`${colors[type]}${icons[type]} ${message}${colors.reset}`);
}

async function setupDatabase() {
  console.log('\n🚀 Niagahoster Database Setup Helper\n');
  
  log('Pastikan Anda sudah setup database di cPanel Niagahoster:', 'info');
  console.log('   1. Create database: pos_cafelux');
  console.log('   2. Create user dengan ALL PRIVILEGES');
  console.log('   3. Import niagahoster-mysql-migration.sql\n');
  
  const proceed = await question('Apakah setup cPanel sudah selesai? (y/n): ');
  if (proceed.toLowerCase() !== 'y') {
    log('Silakan selesaikan setup cPanel terlebih dahulu.', 'warning');
    log('Gunakan panduan: NIAGAHOSTER_DATABASE_SETUP_GUIDE.md', 'info');
    rl.close();
    return;
  }
  
  console.log('\n📝 Masukkan informasi database Niagahoster:\n');
  
  // Collect database information
  const dbHost = await question('Database Host (contoh: mysql.niagahoster.com): ');
  const dbName = await question('Database Name (contoh: username_pos_cafelux): ');
  const dbUser = await question('Database User (contoh: username_cafelux_user): ');
  const dbPassword = await question('Database Password: ');
  const dbPort = await question('Database Port (default: 3306): ') || '3306';
  
  // Create DATABASE_URL
  const databaseUrl = `mysql://${dbUser}:${dbPassword}@${dbHost}:${dbPort}/${dbName}`;
  
  console.log('\n🧪 Testing database connection...\n');
  
  try {
    // Test connection
    const connection = await mysql.createConnection({
      host: dbHost,
      port: parseInt(dbPort),
      user: dbUser,
      password: dbPassword,
      database: dbName
    });
    
    // Test basic query
    await connection.execute('SELECT 1 as test');
    log('Basic connection successful', 'success');
    
    // Check tables
    const [tables] = await connection.execute('SHOW TABLES');
    log(`Found ${tables.length} tables in database`, 'success');
    
    if (tables.length === 9) {
      log('All required tables found (9/9)', 'success');
    } else {
      log(`Missing tables. Expected 9, found ${tables.length}`, 'warning');
      log('Make sure to import niagahoster-mysql-migration.sql', 'warning');
    }
    
    // Test sample data
    try {
      const [products] = await connection.execute('SELECT COUNT(*) as count FROM products');
      log(`Products table: ${products[0].count} records`, 'success');
    } catch (error) {
      log('Products table not found - import migration first', 'warning');
    }
    
    await connection.end();
    
    log('Database connection test successful!', 'success');
    
  } catch (error) {
    log(`Connection failed: ${error.message}`, 'error');
    log('Please check your database credentials and try again.', 'error');
    rl.close();
    return;
  }
  
  console.log('\n📄 Creating environment configuration...\n');
  
  // Create .env file
  const envContent = `# 🚀 POS CafeLux - Niagahoster Database Configuration
# Generated by setup-database-niagahoster.js

# Database Configuration
DATABASE_URL=${databaseUrl}

# Database Details
DB_HOST=${dbHost}
DB_PORT=${dbPort}
DB_NAME=${dbName}
DB_USER=${dbUser}
DB_PASSWORD=${dbPassword}

# Application Configuration
NODE_ENV=production
PORT=5000
SESSION_SECRET=pos-cafelux-niagahoster-${Date.now()}

# Hosting Configuration
HOSTING_PROVIDER=niagahoster
DEPLOYMENT_MODE=production
ENABLE_DATABASE=true
`;
  
  fs.writeFileSync('.env', envContent);
  log('Environment file (.env) created successfully', 'success');
  
  // Create Vercel environment template
  const vercelEnvContent = `# 🚀 Copy these to Vercel Environment Variables
# Go to: Vercel Dashboard > Project > Settings > Environment Variables

DATABASE_URL=${databaseUrl}
DB_HOST=${dbHost}
DB_PORT=${dbPort}
DB_NAME=${dbName}
DB_USER=${dbUser}
DB_PASSWORD=${dbPassword}
NODE_ENV=production
SESSION_SECRET=pos-cafelux-niagahoster-${Date.now()}
HOSTING_PROVIDER=niagahoster
DEPLOYMENT_MODE=production
ENABLE_DATABASE=true
`;
  
  fs.writeFileSync('.env.vercel', vercelEnvContent);
  log('Vercel environment template (.env.vercel) created', 'success');
  
  console.log('\n🎯 Next Steps:\n');
  console.log('1. 📋 Copy environment variables to Vercel:');
  console.log('   - Open Vercel Dashboard > pos-cafelux-main > Settings > Environment Variables');
  console.log('   - Copy variables from .env.vercel file');
  console.log('   - Save and redeploy\n');
  
  console.log('2. 🧪 Test local application:');
  console.log('   npm run dev\n');
  
  console.log('3. 🌐 Test production application:');
  console.log('   https://pos-cafelux-main.vercel.app/\n');
  
  const testLocal = await question('Test local application now? (y/n): ');
  if (testLocal.toLowerCase() === 'y') {
    log('Starting local server...', 'info');
    console.log('Run: npm run dev');
  }
  
  log('Database setup completed successfully!', 'success');
  log('Your POS CafeLux now uses Niagahoster MySQL database', 'success');
  
  rl.close();
}

// Handle errors
process.on('unhandledRejection', (error) => {
  log(`Setup failed: ${error.message}`, 'error');
  process.exit(1);
});

// Run setup
setupDatabase().catch((error) => {
  log(`Setup error: ${error.message}`, 'error');
  process.exit(1);
});
