#!/usr/bin/env node

/**
 * üöÄ SUPABASE LOCAL SETUP WIZARD
 * Interactive script untuk setup environment local dengan Supabase
 */

const fs = require('fs');
const path = require('path');
const readline = require('readline');

// Colors for console output
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m'
};

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

function colorLog(color, message) {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

function question(query) {
  return new Promise(resolve => rl.question(query, resolve));
}

async function main() {
  console.clear();
  
  colorLog('cyan', 'üöÄ ===== SUPABASE LOCAL SETUP WIZARD =====');
  colorLog('yellow', 'üìã Setup environment local untuk POS CafeLux dengan Supabase\n');

  // Check if .env.local already exists
  const envLocalPath = '.env.local';
  if (fs.existsSync(envLocalPath)) {
    colorLog('yellow', '‚ö†Ô∏è  File .env.local sudah ada!');
    const overwrite = await question('Apakah Anda ingin menimpa file yang ada? (y/n): ');
    if (overwrite.toLowerCase() !== 'y') {
      colorLog('blue', '‚úÖ Setup dibatalkan. File .env.local tidak diubah.');
      rl.close();
      return;
    }
  }

  colorLog('green', '\nüìù Silakan masukkan kredensial Supabase Anda:');
  colorLog('blue', 'üí° Dapatkan kredensial dari: https://supabase.com/dashboard\n');

  // Collect Supabase credentials
  const projectRef = await question('üîó Project Reference (dari URL): ');
  const dbPassword = await question('üîê Database Password: ');
  const supabaseUrl = await question('üåê Supabase URL (https://xxx.supabase.co): ');
  const anonKey = await question('üîë Anon Key: ');
  const serviceRoleKey = await question('üîí Service Role Key: ');

  // Generate session secret
  const sessionSecret = Math.random().toString(36).substring(2, 15) + 
                       Math.random().toString(36).substring(2, 15);

  // Create DATABASE_URL
  const databaseUrl = `postgresql://postgres:${dbPassword}@db.${projectRef}.supabase.co:5432/postgres`;

  // Create .env.local content
  const envContent = `# üîß LOCAL DEVELOPMENT ENVIRONMENT
# Generated by setup-supabase-local.js on ${new Date().toISOString()}

# ===== SUPABASE DATABASE CONFIGURATION =====
DATABASE_URL=${databaseUrl}

# ===== SUPABASE API CONFIGURATION =====
NEXT_PUBLIC_SUPABASE_URL=${supabaseUrl}
NEXT_PUBLIC_SUPABASE_ANON_KEY=${anonKey}
SUPABASE_SERVICE_ROLE_KEY=${serviceRoleKey}

# ===== APPLICATION CONFIGURATION =====
NODE_ENV=development
NEXT_PUBLIC_APP_URL=http://localhost:3000
SESSION_SECRET=${sessionSecret}

# ===== OPTIONAL CONFIGURATIONS =====
JWT_SECRET=${sessionSecret}
NEXT_PUBLIC_STORAGE_BUCKET=pos-cafelux-storage
NEXT_PUBLIC_SUPABASE_AUTH_REDIRECT_URL=http://localhost:3000/auth/callback
`;

  // Write .env.local file
  try {
    fs.writeFileSync(envLocalPath, envContent);
    colorLog('green', '\n‚úÖ File .env.local berhasil dibuat!');
  } catch (error) {
    colorLog('red', `\n‚ùå Error membuat file .env.local: ${error.message}`);
    rl.close();
    return;
  }

  // Test database connection
  colorLog('yellow', '\nüîç Testing database connection...');
  
  try {
    // Simple connection test
    const testConnection = await testDatabaseConnection(databaseUrl);
    if (testConnection) {
      colorLog('green', '‚úÖ Database connection successful!');
    } else {
      colorLog('yellow', '‚ö†Ô∏è  Database connection test skipped (install dependencies first)');
    }
  } catch (error) {
    colorLog('red', `‚ùå Database connection failed: ${error.message}`);
    colorLog('yellow', 'üí° Pastikan kredensial Supabase benar dan jaringan stabil');
  }

  // Show next steps
  colorLog('cyan', '\nüéØ ===== NEXT STEPS =====');
  colorLog('green', '1. Install dependencies:');
  colorLog('blue', '   npm install');
  colorLog('green', '\n2. Setup database schema:');
  colorLog('blue', '   - Buka Supabase Dashboard > SQL Editor');
  colorLog('blue', '   - Copy & paste SQL dari SUPABASE_LOCAL_SETUP_GUIDE.md');
  colorLog('blue', '   - Run script untuk create tables');
  colorLog('green', '\n3. Start development server:');
  colorLog('blue', '   npm run dev');
  colorLog('green', '\n4. Open browser:');
  colorLog('blue', '   http://localhost:3000');

  colorLog('magenta', '\nüìö Untuk panduan lengkap, baca: SUPABASE_LOCAL_SETUP_GUIDE.md');
  colorLog('green', '\nüéâ Setup selesai! Happy coding! üöÄ');

  rl.close();
}

async function testDatabaseConnection(databaseUrl) {
  try {
    // Try to require pg module
    const { Pool } = require('pg');
    const pool = new Pool({ connectionString: databaseUrl });
    
    const client = await pool.connect();
    await client.query('SELECT NOW()');
    client.release();
    await pool.end();
    
    return true;
  } catch (error) {
    if (error.code === 'MODULE_NOT_FOUND') {
      // pg module not installed yet
      return false;
    }
    throw error;
  }
}

// Handle process termination
process.on('SIGINT', () => {
  colorLog('yellow', '\n\nüëã Setup dibatalkan oleh user');
  rl.close();
  process.exit(0);
});

// Run the setup wizard
main().catch(error => {
  colorLog('red', `\n‚ùå Error: ${error.message}`);
  rl.close();
  process.exit(1);
});
